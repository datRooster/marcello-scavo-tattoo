name: WordPress Theme CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, mysql
        coverage: xdebug
        tools: composer
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Run PHPCS
      run: ./vendor/bin/phpcs --standard=phpcs.xml --report=checkstyle --report-file=phpcs-report.xml
    
    - name: Upload PHPCS report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: phpcs-report-php${{ matrix.php-version }}
        path: phpcs-report.xml
    
    - name: Run PHP Compatibility check
      run: ./vendor/bin/phpcs --standard=PHPCompatibilityWP --runtime-set testVersion 7.4- --report=checkstyle --report-file=phpcompat-report.xml
    
    - name: Upload PHP Compatibility report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: phpcompat-report-php${{ matrix.php-version }}
        path: phpcompat-report.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Run security scan
      run: |
        # Install security scanner
        composer require --dev roave/security-advisories:dev-latest || true
        
        # Check for known vulnerabilities
        composer audit || true
    
    - name: WordPress Security scan
      run: |
        # Custom security checks for WordPress themes
        echo "Running WordPress theme security checks..."
        
        # Check for common security issues
        grep -r "eval(" . --include="*.php" || echo "No eval() functions found"
        grep -r "\$_GET\|" . --include="*.php" || echo "No direct \$_GET usage found"
        grep -r "\$_POST\|" . --include="*.php" || echo "No direct \$_POST usage found"
        grep -r "file_get_contents" . --include="*.php" || echo "No file_get_contents() found"

  performance-test:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Performance analysis
      run: |
        echo "Analyzing theme performance..."
        
        # Check file sizes
        echo "=== File Size Analysis ==="
        find . -name "*.php" -exec wc -l {} + | sort -n
        
        # Check for performance issues
        echo "=== Performance Check ==="
        grep -r "wp_query\|get_posts\|query_posts" . --include="*.php" || echo "No direct queries found"
        
        # Check asset optimization
        echo "=== Asset Analysis ==="
        find assets/ -name "*.css" -o -name "*.js" 2>/dev/null | wc -l || echo "No assets directory"

  wordpress-compatibility:
    name: WordPress Compatibility
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    strategy:
      matrix:
        wordpress-version: ['6.0', '6.1', '6.2', '6.3', 'latest']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, mysql
        tools: composer, wp-cli
    
    - name: Install WordPress
      run: |
        wp core download --version=${{ matrix.wordpress-version }} --path=/tmp/wordpress --allow-root
        wp config create --dbname=wordpress_test --dbuser=root --dbpass=root --dbhost=127.0.0.1 --path=/tmp/wordpress --allow-root
        wp core install --url=localhost --title="Test Site" --admin_user=admin --admin_password=admin --admin_email=admin@example.com --path=/tmp/wordpress --allow-root
    
    - name: Install theme
      run: |
        mkdir -p /tmp/wordpress/wp-content/themes/marcello-scavo-tattoo
        cp -r . /tmp/wordpress/wp-content/themes/marcello-scavo-tattoo/
        cd /tmp/wordpress
        wp theme activate marcello-scavo-tattoo --allow-root
    
    - name: Test theme activation
      run: |
        cd /tmp/wordpress
        wp theme list --allow-root
        wp theme status marcello-scavo-tattoo --allow-root

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl
        coverage: xdebug
        tools: composer
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Generate code coverage
      run: |
        echo "Code coverage analysis would go here"
        # For now, just analyze code structure
        find . -name "*.php" -not -path "./vendor/*" | wc -l

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, wordpress-compatibility]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare deployment package
      run: |
        # Create deployment package
        zip -r marcello-scavo-tattoo-staging.zip . -x "*.git*" "node_modules/*" "*.md" ".github/*" "tests/*"
    
    - name: Upload staging artifact
      uses: actions/upload-artifact@v3
      with:
        name: staging-package
        path: marcello-scavo-tattoo-staging.zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, wordpress-compatibility]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Prepare production package
      run: |
        # Remove development files
        rm -rf .github tests *.md dev-tools.sh
        rm -f composer.json composer.lock phpcs.xml
        
        # Create production package
        zip -r marcello-scavo-tattoo-production.zip . -x "*.git*" "node_modules/*" "vendor/bin/*" "vendor/*/tests/*"
    
    - name: Upload production artifact
      uses: actions/upload-artifact@v3
      with:
        name: production-package
        path: marcello-scavo-tattoo-production.zip
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, performance-test, wordpress-compatibility]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.security-scan.result == 'success' }}
      run: echo "All checks passed! üéâ"
    
    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: echo "Some checks failed! Please review the logs. ‚ùå"